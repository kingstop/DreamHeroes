// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_game_platform.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_game_platform.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message {

namespace {

const ::google::protobuf::Descriptor* MsgS2PRegisterServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgS2PRegisterServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgP2SRegisterACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgP2SRegisterACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgP2SClinchADealNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgP2SClinchADealNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlatformError_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fgame_5fplatform_2eproto() {
  protobuf_AddDesc_msg_5fgame_5fplatform_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_game_platform.proto");
  GOOGLE_CHECK(file != NULL);
  MsgS2PRegisterServer_descriptor_ = file->message_type(0);
  static const int MsgS2PRegisterServer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2PRegisterServer, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2PRegisterServer, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2PRegisterServer, server_type_),
  };
  MsgS2PRegisterServer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgS2PRegisterServer_descriptor_,
      MsgS2PRegisterServer::default_instance_,
      MsgS2PRegisterServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2PRegisterServer, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgS2PRegisterServer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgS2PRegisterServer, _internal_metadata_),
      -1);
  MsgP2SRegisterACK_descriptor_ = file->message_type(1);
  static const int MsgP2SRegisterACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgP2SRegisterACK, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgP2SRegisterACK, describe_),
  };
  MsgP2SRegisterACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgP2SRegisterACK_descriptor_,
      MsgP2SRegisterACK::default_instance_,
      MsgP2SRegisterACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgP2SRegisterACK, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgP2SRegisterACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgP2SRegisterACK, _internal_metadata_),
      -1);
  MsgP2SClinchADealNotify_descriptor_ = file->message_type(2);
  static const int MsgP2SClinchADealNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgP2SClinchADealNotify, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgP2SClinchADealNotify, product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgP2SClinchADealNotify, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgP2SClinchADealNotify, user_id_),
  };
  MsgP2SClinchADealNotify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgP2SClinchADealNotify_descriptor_,
      MsgP2SClinchADealNotify::default_instance_,
      MsgP2SClinchADealNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgP2SClinchADealNotify, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgP2SClinchADealNotify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgP2SClinchADealNotify, _internal_metadata_),
      -1);
  PlatformError_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fgame_5fplatform_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgS2PRegisterServer_descriptor_, &MsgS2PRegisterServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgP2SRegisterACK_descriptor_, &MsgP2SRegisterACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgP2SClinchADealNotify_descriptor_, &MsgP2SClinchADealNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fgame_5fplatform_2eproto() {
  delete MsgS2PRegisterServer::default_instance_;
  delete MsgS2PRegisterServer_reflection_;
  delete MsgP2SRegisterACK::default_instance_;
  delete MsgP2SRegisterACK_reflection_;
  delete MsgP2SClinchADealNotify::default_instance_;
  delete MsgP2SClinchADealNotify_reflection_;
}

void protobuf_AddDesc_msg_5fgame_5fplatform_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027msg_game_platform.proto\022\007message\"O\n\024Ms"
    "gS2PRegisterServer\022\021\n\tserver_id\030\001 \002(\005\022\017\n"
    "\007game_id\030\002 \002(\005\022\023\n\013server_type\030\003 \002(\005\"^\n\021M"
    "sgP2SRegisterACK\0227\n\005error\030\001 \002(\0162\026.messag"
    "e.PlatformError:\020PlatformError_NO\022\020\n\010des"
    "cribe\030\002 \002(\t\"`\n\027MsgP2SClinchADealNotify\022\016"
    "\n\006status\030\001 \002(\005\022\022\n\nproduct_id\030\002 \002(\t\022\020\n\010or"
    "der_id\030\003 \002(\005\022\017\n\007user_id\030\004 \002(\004*b\n\rPlatfor"
    "mError\022\024\n\020PlatformError_NO\020\000\022\030\n\024Platform"
    "Error_Unknow\020\001\022!\n\035PlatformError_AlreadyR"
    "egister\020\002", 409);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_game_platform.proto", &protobuf_RegisterTypes);
  MsgS2PRegisterServer::default_instance_ = new MsgS2PRegisterServer();
  MsgP2SRegisterACK::default_instance_ = new MsgP2SRegisterACK();
  MsgP2SClinchADealNotify::default_instance_ = new MsgP2SClinchADealNotify();
  MsgS2PRegisterServer::default_instance_->InitAsDefaultInstance();
  MsgP2SRegisterACK::default_instance_->InitAsDefaultInstance();
  MsgP2SClinchADealNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fgame_5fplatform_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fgame_5fplatform_2eproto {
  StaticDescriptorInitializer_msg_5fgame_5fplatform_2eproto() {
    protobuf_AddDesc_msg_5fgame_5fplatform_2eproto();
  }
} static_descriptor_initializer_msg_5fgame_5fplatform_2eproto_;
const ::google::protobuf::EnumDescriptor* PlatformError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlatformError_descriptor_;
}
bool PlatformError_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int MsgS2PRegisterServer::kServerIdFieldNumber;
const int MsgS2PRegisterServer::kGameIdFieldNumber;
const int MsgS2PRegisterServer::kServerTypeFieldNumber;
#endif  // !_MSC_VER

MsgS2PRegisterServer::MsgS2PRegisterServer()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgS2PRegisterServer)
}

void MsgS2PRegisterServer::InitAsDefaultInstance() {
}

MsgS2PRegisterServer::MsgS2PRegisterServer(const MsgS2PRegisterServer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgS2PRegisterServer)
}

void MsgS2PRegisterServer::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  game_id_ = 0;
  server_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgS2PRegisterServer::~MsgS2PRegisterServer() {
  // @@protoc_insertion_point(destructor:message.MsgS2PRegisterServer)
  SharedDtor();
}

void MsgS2PRegisterServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgS2PRegisterServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgS2PRegisterServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgS2PRegisterServer_descriptor_;
}

const MsgS2PRegisterServer& MsgS2PRegisterServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgame_5fplatform_2eproto();
  return *default_instance_;
}

MsgS2PRegisterServer* MsgS2PRegisterServer::default_instance_ = NULL;

MsgS2PRegisterServer* MsgS2PRegisterServer::New(::google::protobuf::Arena* arena) const {
  MsgS2PRegisterServer* n = new MsgS2PRegisterServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgS2PRegisterServer::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgS2PRegisterServer*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(server_id_, server_type_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgS2PRegisterServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgS2PRegisterServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // required int32 game_id = 2;
      case 2: {
        if (tag == 16) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_server_type;
        break;
      }

      // required int32 server_type = 3;
      case 3: {
        if (tag == 24) {
         parse_server_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgS2PRegisterServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgS2PRegisterServer)
  return false;
#undef DO_
}

void MsgS2PRegisterServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgS2PRegisterServer)
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // required int32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_id(), output);
  }

  // required int32 server_type = 3;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgS2PRegisterServer)
}

::google::protobuf::uint8* MsgS2PRegisterServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgS2PRegisterServer)
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // required int32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_id(), target);
  }

  // required int32 server_type = 3;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgS2PRegisterServer)
  return target;
}

int MsgS2PRegisterServer::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_server_id()) {
    // required int32 server_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  if (has_game_id()) {
    // required int32 game_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  if (has_server_type()) {
    // required int32 server_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_type());
  }

  return total_size;
}
int MsgS2PRegisterServer::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 server_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_id());

    // required int32 game_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());

    // required int32 server_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgS2PRegisterServer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgS2PRegisterServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgS2PRegisterServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgS2PRegisterServer::MergeFrom(const MsgS2PRegisterServer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgS2PRegisterServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgS2PRegisterServer::CopyFrom(const MsgS2PRegisterServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgS2PRegisterServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MsgS2PRegisterServer::Swap(MsgS2PRegisterServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgS2PRegisterServer::InternalSwap(MsgS2PRegisterServer* other) {
  std::swap(server_id_, other->server_id_);
  std::swap(game_id_, other->game_id_);
  std::swap(server_type_, other->server_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgS2PRegisterServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgS2PRegisterServer_descriptor_;
  metadata.reflection = MsgS2PRegisterServer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgS2PRegisterServer

// required int32 server_id = 1;
 bool MsgS2PRegisterServer::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgS2PRegisterServer::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgS2PRegisterServer::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgS2PRegisterServer::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
 ::google::protobuf::int32 MsgS2PRegisterServer::server_id() const {
  // @@protoc_insertion_point(field_get:message.MsgS2PRegisterServer.server_id)
  return server_id_;
}
 void MsgS2PRegisterServer::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgS2PRegisterServer.server_id)
}

// required int32 game_id = 2;
 bool MsgS2PRegisterServer::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MsgS2PRegisterServer::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void MsgS2PRegisterServer::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MsgS2PRegisterServer::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
 ::google::protobuf::int32 MsgS2PRegisterServer::game_id() const {
  // @@protoc_insertion_point(field_get:message.MsgS2PRegisterServer.game_id)
  return game_id_;
}
 void MsgS2PRegisterServer::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgS2PRegisterServer.game_id)
}

// required int32 server_type = 3;
 bool MsgS2PRegisterServer::has_server_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void MsgS2PRegisterServer::set_has_server_type() {
  _has_bits_[0] |= 0x00000004u;
}
 void MsgS2PRegisterServer::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000004u;
}
 void MsgS2PRegisterServer::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
 ::google::protobuf::int32 MsgS2PRegisterServer::server_type() const {
  // @@protoc_insertion_point(field_get:message.MsgS2PRegisterServer.server_type)
  return server_type_;
}
 void MsgS2PRegisterServer::set_server_type(::google::protobuf::int32 value) {
  set_has_server_type();
  server_type_ = value;
  // @@protoc_insertion_point(field_set:message.MsgS2PRegisterServer.server_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgP2SRegisterACK::kErrorFieldNumber;
const int MsgP2SRegisterACK::kDescribeFieldNumber;
#endif  // !_MSC_VER

MsgP2SRegisterACK::MsgP2SRegisterACK()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgP2SRegisterACK)
}

void MsgP2SRegisterACK::InitAsDefaultInstance() {
}

MsgP2SRegisterACK::MsgP2SRegisterACK(const MsgP2SRegisterACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgP2SRegisterACK)
}

void MsgP2SRegisterACK::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = 0;
  describe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgP2SRegisterACK::~MsgP2SRegisterACK() {
  // @@protoc_insertion_point(destructor:message.MsgP2SRegisterACK)
  SharedDtor();
}

void MsgP2SRegisterACK::SharedDtor() {
  describe_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MsgP2SRegisterACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgP2SRegisterACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgP2SRegisterACK_descriptor_;
}

const MsgP2SRegisterACK& MsgP2SRegisterACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgame_5fplatform_2eproto();
  return *default_instance_;
}

MsgP2SRegisterACK* MsgP2SRegisterACK::default_instance_ = NULL;

MsgP2SRegisterACK* MsgP2SRegisterACK::New(::google::protobuf::Arena* arena) const {
  MsgP2SRegisterACK* n = new MsgP2SRegisterACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgP2SRegisterACK::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    error_ = 0;
    if (has_describe()) {
      describe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgP2SRegisterACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgP2SRegisterACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message.PlatformError error = 1 [default = PlatformError_NO];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::PlatformError_IsValid(value)) {
            set_error(static_cast< ::message::PlatformError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_describe;
        break;
      }

      // required string describe = 2;
      case 2: {
        if (tag == 18) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->describe().data(), this->describe().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.MsgP2SRegisterACK.describe");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgP2SRegisterACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgP2SRegisterACK)
  return false;
#undef DO_
}

void MsgP2SRegisterACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgP2SRegisterACK)
  // required .message.PlatformError error = 1 [default = PlatformError_NO];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // required string describe = 2;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgP2SRegisterACK.describe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->describe(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgP2SRegisterACK)
}

::google::protobuf::uint8* MsgP2SRegisterACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgP2SRegisterACK)
  // required .message.PlatformError error = 1 [default = PlatformError_NO];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  // required string describe = 2;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgP2SRegisterACK.describe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->describe(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgP2SRegisterACK)
  return target;
}

int MsgP2SRegisterACK::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_error()) {
    // required .message.PlatformError error = 1 [default = PlatformError_NO];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  if (has_describe()) {
    // required string describe = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->describe());
  }

  return total_size;
}
int MsgP2SRegisterACK::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .message.PlatformError error = 1 [default = PlatformError_NO];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());

    // required string describe = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->describe());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgP2SRegisterACK::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgP2SRegisterACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgP2SRegisterACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgP2SRegisterACK::MergeFrom(const MsgP2SRegisterACK& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_describe()) {
      set_has_describe();
      describe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.describe_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgP2SRegisterACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgP2SRegisterACK::CopyFrom(const MsgP2SRegisterACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgP2SRegisterACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgP2SRegisterACK::Swap(MsgP2SRegisterACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgP2SRegisterACK::InternalSwap(MsgP2SRegisterACK* other) {
  std::swap(error_, other->error_);
  describe_.Swap(&other->describe_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgP2SRegisterACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgP2SRegisterACK_descriptor_;
  metadata.reflection = MsgP2SRegisterACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgP2SRegisterACK

// required .message.PlatformError error = 1 [default = PlatformError_NO];
 bool MsgP2SRegisterACK::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgP2SRegisterACK::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgP2SRegisterACK::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgP2SRegisterACK::clear_error() {
  error_ = 0;
  clear_has_error();
}
 ::message::PlatformError MsgP2SRegisterACK::error() const {
  // @@protoc_insertion_point(field_get:message.MsgP2SRegisterACK.error)
  return static_cast< ::message::PlatformError >(error_);
}
 void MsgP2SRegisterACK::set_error(::message::PlatformError value) {
  assert(::message::PlatformError_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:message.MsgP2SRegisterACK.error)
}

// required string describe = 2;
 bool MsgP2SRegisterACK::has_describe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MsgP2SRegisterACK::set_has_describe() {
  _has_bits_[0] |= 0x00000002u;
}
 void MsgP2SRegisterACK::clear_has_describe() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MsgP2SRegisterACK::clear_describe() {
  describe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_describe();
}
 const ::std::string& MsgP2SRegisterACK::describe() const {
  // @@protoc_insertion_point(field_get:message.MsgP2SRegisterACK.describe)
  return describe_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgP2SRegisterACK::set_describe(const ::std::string& value) {
  set_has_describe();
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.MsgP2SRegisterACK.describe)
}
 void MsgP2SRegisterACK::set_describe(const char* value) {
  set_has_describe();
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.MsgP2SRegisterACK.describe)
}
 void MsgP2SRegisterACK::set_describe(const char* value, size_t size) {
  set_has_describe();
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.MsgP2SRegisterACK.describe)
}
 ::std::string* MsgP2SRegisterACK::mutable_describe() {
  set_has_describe();
  // @@protoc_insertion_point(field_mutable:message.MsgP2SRegisterACK.describe)
  return describe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgP2SRegisterACK::release_describe() {
  clear_has_describe();
  return describe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgP2SRegisterACK::set_allocated_describe(::std::string* describe) {
  if (describe != NULL) {
    set_has_describe();
  } else {
    clear_has_describe();
  }
  describe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), describe);
  // @@protoc_insertion_point(field_set_allocated:message.MsgP2SRegisterACK.describe)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgP2SClinchADealNotify::kStatusFieldNumber;
const int MsgP2SClinchADealNotify::kProductIdFieldNumber;
const int MsgP2SClinchADealNotify::kOrderIdFieldNumber;
const int MsgP2SClinchADealNotify::kUserIdFieldNumber;
#endif  // !_MSC_VER

MsgP2SClinchADealNotify::MsgP2SClinchADealNotify()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgP2SClinchADealNotify)
}

void MsgP2SClinchADealNotify::InitAsDefaultInstance() {
}

MsgP2SClinchADealNotify::MsgP2SClinchADealNotify(const MsgP2SClinchADealNotify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgP2SClinchADealNotify)
}

void MsgP2SClinchADealNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgP2SClinchADealNotify::~MsgP2SClinchADealNotify() {
  // @@protoc_insertion_point(destructor:message.MsgP2SClinchADealNotify)
  SharedDtor();
}

void MsgP2SClinchADealNotify::SharedDtor() {
  product_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MsgP2SClinchADealNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgP2SClinchADealNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgP2SClinchADealNotify_descriptor_;
}

const MsgP2SClinchADealNotify& MsgP2SClinchADealNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgame_5fplatform_2eproto();
  return *default_instance_;
}

MsgP2SClinchADealNotify* MsgP2SClinchADealNotify::default_instance_ = NULL;

MsgP2SClinchADealNotify* MsgP2SClinchADealNotify::New(::google::protobuf::Arena* arena) const {
  MsgP2SClinchADealNotify* n = new MsgP2SClinchADealNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgP2SClinchADealNotify::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgP2SClinchADealNotify*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(status_, user_id_);
    if (has_product_id()) {
      product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgP2SClinchADealNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgP2SClinchADealNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_product_id;
        break;
      }

      // required string product_id = 2;
      case 2: {
        if (tag == 18) {
         parse_product_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product_id().data(), this->product_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.MsgP2SClinchADealNotify.product_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order_id;
        break;
      }

      // required int32 order_id = 3;
      case 3: {
        if (tag == 24) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }

      // required uint64 user_id = 4;
      case 4: {
        if (tag == 32) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgP2SClinchADealNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgP2SClinchADealNotify)
  return false;
#undef DO_
}

void MsgP2SClinchADealNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgP2SClinchADealNotify)
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // required string product_id = 2;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgP2SClinchADealNotify.product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->product_id(), output);
  }

  // required int32 order_id = 3;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->order_id(), output);
  }

  // required uint64 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgP2SClinchADealNotify)
}

::google::protobuf::uint8* MsgP2SClinchADealNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgP2SClinchADealNotify)
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // required string product_id = 2;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgP2SClinchADealNotify.product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->product_id(), target);
  }

  // required int32 order_id = 3;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->order_id(), target);
  }

  // required uint64 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgP2SClinchADealNotify)
  return target;
}

int MsgP2SClinchADealNotify::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_status()) {
    // required int32 status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  if (has_product_id()) {
    // required string product_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_id());
  }

  if (has_order_id()) {
    // required int32 order_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_id());
  }

  if (has_user_id()) {
    // required uint64 user_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  return total_size;
}
int MsgP2SClinchADealNotify::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

    // required string product_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_id());

    // required int32 order_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_id());

    // required uint64 user_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgP2SClinchADealNotify::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgP2SClinchADealNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgP2SClinchADealNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgP2SClinchADealNotify::MergeFrom(const MsgP2SClinchADealNotify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_product_id()) {
      set_has_product_id();
      product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgP2SClinchADealNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgP2SClinchADealNotify::CopyFrom(const MsgP2SClinchADealNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgP2SClinchADealNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MsgP2SClinchADealNotify::Swap(MsgP2SClinchADealNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgP2SClinchADealNotify::InternalSwap(MsgP2SClinchADealNotify* other) {
  std::swap(status_, other->status_);
  product_id_.Swap(&other->product_id_);
  std::swap(order_id_, other->order_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgP2SClinchADealNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgP2SClinchADealNotify_descriptor_;
  metadata.reflection = MsgP2SClinchADealNotify_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgP2SClinchADealNotify

// required int32 status = 1;
 bool MsgP2SClinchADealNotify::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgP2SClinchADealNotify::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgP2SClinchADealNotify::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgP2SClinchADealNotify::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::google::protobuf::int32 MsgP2SClinchADealNotify::status() const {
  // @@protoc_insertion_point(field_get:message.MsgP2SClinchADealNotify.status)
  return status_;
}
 void MsgP2SClinchADealNotify::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:message.MsgP2SClinchADealNotify.status)
}

// required string product_id = 2;
 bool MsgP2SClinchADealNotify::has_product_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MsgP2SClinchADealNotify::set_has_product_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void MsgP2SClinchADealNotify::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MsgP2SClinchADealNotify::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product_id();
}
 const ::std::string& MsgP2SClinchADealNotify::product_id() const {
  // @@protoc_insertion_point(field_get:message.MsgP2SClinchADealNotify.product_id)
  return product_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgP2SClinchADealNotify::set_product_id(const ::std::string& value) {
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.MsgP2SClinchADealNotify.product_id)
}
 void MsgP2SClinchADealNotify::set_product_id(const char* value) {
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.MsgP2SClinchADealNotify.product_id)
}
 void MsgP2SClinchADealNotify::set_product_id(const char* value, size_t size) {
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.MsgP2SClinchADealNotify.product_id)
}
 ::std::string* MsgP2SClinchADealNotify::mutable_product_id() {
  set_has_product_id();
  // @@protoc_insertion_point(field_mutable:message.MsgP2SClinchADealNotify.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgP2SClinchADealNotify::release_product_id() {
  clear_has_product_id();
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgP2SClinchADealNotify::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    set_has_product_id();
  } else {
    clear_has_product_id();
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:message.MsgP2SClinchADealNotify.product_id)
}

// required int32 order_id = 3;
 bool MsgP2SClinchADealNotify::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void MsgP2SClinchADealNotify::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
 void MsgP2SClinchADealNotify::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
 void MsgP2SClinchADealNotify::clear_order_id() {
  order_id_ = 0;
  clear_has_order_id();
}
 ::google::protobuf::int32 MsgP2SClinchADealNotify::order_id() const {
  // @@protoc_insertion_point(field_get:message.MsgP2SClinchADealNotify.order_id)
  return order_id_;
}
 void MsgP2SClinchADealNotify::set_order_id(::google::protobuf::int32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgP2SClinchADealNotify.order_id)
}

// required uint64 user_id = 4;
 bool MsgP2SClinchADealNotify::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void MsgP2SClinchADealNotify::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
 void MsgP2SClinchADealNotify::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
 void MsgP2SClinchADealNotify::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
 ::google::protobuf::uint64 MsgP2SClinchADealNotify::user_id() const {
  // @@protoc_insertion_point(field_get:message.MsgP2SClinchADealNotify.user_id)
  return user_id_;
}
 void MsgP2SClinchADealNotify::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:message.MsgP2SClinchADealNotify.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
